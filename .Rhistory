r_true <- (data_calib$n - mu_true[(n_train +1) : (n_train +n_calib)]) / sqrt(mu_true[(n_train +1) : (n_train +n_calib)])
r_GLM_GBM_correct <-(data_calib$n - mu_glm_correct_calib) / sqrt(phi_correct_calib * mu_glm_correct_calib)
r_GLM_1_correct <- (data_calib$n - mu_glm_correct_calib) / sqrt(mu_glm_correct_calib)
r_GLM_GBM <-(data_calib$n - mu_glm_calib) / sqrt(phi_glm_calib * mu_glm_calib)
r_GLM_1 <- (data_calib$n - mu_glm_calib) / sqrt(mu_glm_calib)
r_GBM_GBM <- (data_calib$n - mu_gbm_calib) / sqrt(phi_gbm_calib * mu_gbm_calib)
r_GBM_1 <- (data_calib$n - mu_gbm_calib) / sqrt(mu_gbm_calib)
plot_lims <- c(min(r_true, r_GLM_1, r_GLM_GBM, r_GBM_1, r_GBM_GBM, r_GLM_GBM_correct, r_GLM_1_correct),
max(r_true, r_GLM_1, r_GLM_GBM, r_GBM_1, r_GBM_GBM, r_GLM_GBM_correct, r_GLM_1_correct))
png(file = sprintf("%s%s_Pearson_GLM_GBM_correct.png", file_path_figs, base_file))
plot(r_GLM_GBM_correct, r_true, pch = 20, #xlim = plot_lims, ylim = plot_lims,
ylab = "Pearson true mu GLM, phi = 1",
xlab = "Pearson est mu GLM (correct), est phi GBM")
dev.off()
png(file = sprintf("%s%s_Pearson_GLM_phi_1_correct.png", file_path_figs, base_file))
plot(r_GLM_1_correct, r_true, pch = 20, #xlim = plot_lims, ylim = plot_lims,
ylab = "Pearson true mu GLM, phi = 1",
xlab = "Pearson est mu GLM (correct), phi = 1")
dev.off()
png(file = sprintf("%s%s_Pearson_GLM_GBM.png", file_path_figs, base_file))
plot(r_GLM_GBM, r_true, pch = 20, #xlim = plot_lims, ylim = plot_lims,
ylab = "Pearson true mu GLM, phi = 1",
xlab = "Pearson est mu GLM, est phi GBM")
# INIT
setwd("//e75a0679/sakta/UTV/SU/Program/Analys/Boosting GLM/Boosting-GLM")
source("load_packages.r")
load_packages(updateR = FALSE)
date <- "20220403"
data <- "beMTPL"
plot_folder <- paste("Plottar/",suffix,"_",date, sep="")
dir.create(plot_folder)
plot_folder
suffix <- data
plot_folder <- paste("Plottar/",suffix,"_",date, sep="")
dir.create(plot_folder)
source("vis_and_eval.r")
source("vis_and_eval.r")
source("vis_and_eval.r")
date <- "20220403"
data <- "auspriv"
suffix <- data
plot_folder <- paste("Plottar/",suffix,"_",date, sep="")
dir.create(plot_folder)
source("vis_and_eval.r")
data <- "freMTPL"
date <- "20220403"
plot_folder <- paste("Plottar/",suffix,"_",date, sep="")
dir.create(plot_folder)
data <- "freMTPL"
data
suffix <- data
plot_folder <- paste("Plottar/",suffix,"_",date, sep="")
dir.create(plot_folder)
source("vis_and_eval.r")
data <- "auspriv"
date <- "20220403"
# INIT
setwd("//e75a0679/sakta/UTV/SU/Program/Analys/Boosting GLM/Boosting-GLM")
suffix <- data
plot_folder <- paste("Plottar/",suffix,"_",date, sep="")
dir.create(plot_folder)
source("vis_and_eval.r")
source("vis_and_eval.r")
MSEP_test
num_facts
colnames(boosting_df$train)[sapply(boosting_df$train,class) %in% c("numeric","integer")] %>% dplyr::select(-c("dur","freq") )
num_facts <-  colnames(boosting_df$train)[sapply(boosting_df$train,class) %in% c("numeric","integer")] %>% dplyr::select(-c(dur,freq) )
num_facts <-  colnames(boosting_df$train)[sapply(boosting_df$train,class) %in% c("numeric","integer")] %>% dplyr::select(-(dur,freq) )
colnames(boosting_df$train)[sapply(boosting_df$train,class) %in% c("numeric","integer")]
colnames(boosting_df$train %>% dplyr::select(-c("dur","freq")))[sapply(boosting_df$train,class) %in% c("numeric","integer")]
colnames(boosting_df$train %>% dplyr::select(-c("dur","freq")))
sapply(boosting_df$train %>% dplyr::select(-c("dur","freq"),class)
colnames(boosting_df$train %>% dplyr::select(-c("dur","freq")))[sapply(boosting_df$train %>% dplyr::select(-c("dur","freq"),class)) %in% c("numeric","integer")]
colnames(boosting_df$train %>% dplyr::select(-c("dur","freq")))[sapply(boosting_df$train %>% dplyr::select(-c("dur","freq"),class)) %in% c("numeric","integer")]
sapply(boosting_df$train %>% dplyr::select(-c("dur","freq"),class))
sapply(boosting_df$train %>% dplyr::select(-c("dur","freq")),class)
colnames(boosting_df$train %>% dplyr::select(-c("dur","freq")))[sapply(boosting_df$train %>% dplyr::select(-c("dur","freq")),class) %in% c("numeric","integer")]
source("vis_and_eval.r")
source("vis_and_eval.r")
MSEP_cal
# Predictive performance --------------------------------------------------
model_names <- c("Intercept","GBM", "Linear", "Final GLM (no lasso)", "Final GLM")
MSEP_cal <- data.frame( Model= model_names,
MSEP=round(c( mean((mean(boosting_df$train$freq) - boosting_df$cal$freq) ^2),
mean((pred$cal$ref - boosting_df$cal$freq) ^2),
mean((pred$cal$init - boosting_df$cal$freq) ^2),
mean((pred$cal$boosted_glm$vanilla - boosting_df$cal$freq)^2),
mean((pred$cal$boosted_glm$lasso - boosting_df$cal$freq)^2)),4),
Deviance = round(c(deviance(rep(mean(boosting_df$train$freq),length(boosting_df$cal$freq)) , pred_phi=NULL, boosting_df$cal$freq, res = FALSE),
deviance(pred$cal$ref, pred_phi=NULL, boosting_df$cal$freq, res = FALSE),
deviance(pred$cal$init, pred_phi=NULL, boosting_df$cal$freq, res = FALSE),
deviance(pred$cal$boosted_glm$vanilla , pred_phi=NULL, boosting_df$cal$freq, res = FALSE),
deviance(pred$cal$boosted_glm$lasso , pred_phi=NULL, boosting_df$cal$freq, res = FALSE)),4),
Fidelity= round(c(0,
cor(pred$cal$ref, pred$cal$ref),
cor(pred$cal$init, pred$cal$ref),
cor(pred$cal$boosted_glm$vanilla , pred$cal$ref),
cor(pred$cal$boosted_glm$lasso ,pred$cal$ref)),2)
)
(mean(boosting_df$train$freq)
)
boosting_df$cal$freq
pred$cal$ref
pred$cal$init
pred$cal$boosted_glm$vanilla
source("vis_and_eval.r")
MSEP_cal
source("vis_and_eval.r")
