coord_flip() + # This flips the axes to make it a horizontal bar plot
xlab("Factor Name") +
ylab("Sum of Variable Importance") +
ggtitle("Variable Importance Plot") +
theme_minimal()
# Plotting
p <- ggplot(coef_df, aes(x = reorder(factor_name, sum_VI), y = sum_VI)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() + # This flips the axes to make it a horizontal bar plot
xlab("Factor Name") +
ylab("Variable Importance") +
ggtitle("Variable Importance Plot") +
theme_minimal()
ggsave(filename = paste(plot_folder,"/Variable_importance.png",sep=""), plot = p, dpi = 300,width = 10, height = 8)
# Predictions vector from  model
predictions <- predict(models$final$lasso, newdata = your_new_data, s = best_lambda)
sort(pred$train$boosted_glm)
load(paste("Data/Predictions_",suffix,".RData", sep = ""))
# Ordering predictions
ordered_predictions <- sort(pred$train$boosted_glm$lasso)
ordered_predictions
# Getting percentiles
p25 <- quantile(ordered_predictions, probs = 0.25)
p50 <- quantile(ordered_predictions, probs = 0.5)
p75 <- quantile(ordered_predictions, probs = 0.75)
p75
pred$train$boosted_glm$lasso
which(sort(pred$train$boosted_glm$lasso))
boosting_df$train
boosting_df$train["pred_final"] <-pred$train$boosted_glm$lasso
boosting_df$train
quantile(boosting_df$train["pred_final"] , probs = 0.25)
quantile(boosting_df$train[["pred_final"]] , probs = 0.25)
p25
# Getting percentiles
p25 <- quantile(boosting_df$train[["pred_final"]] , probs = 0.25)
p50 <- quantile(boosting_df$train[["pred_final"]], probs = 0.5)
p75 <- quantile(boosting_df$train[["pred_final"]], probs = 0.75)
boosting_df$train[boosting_df$train$pred_final == p25]
boosting_df$train$pred_final == p25
boosting_df$train[boosting_df$train$pred_final == p25,:]
boosting_df$train[boosting_df$train$pred_final == p25,]
boosting_df$train[as.numeric(boosting_df$train$pred_final) == p25,]
as.numeric(boosting_df$train$pred_final)
boosting_df$train[as.numeric(boosting_df$train$pred_final) == as.numeric(p25),]
as.numeric(p25)
boosting_df$train %>% order_by(pred_final)
boosting_df$train %>% order_by("pred_final")
# Getting percentiles
p25 <- quantile(boosting_df$train$pred_final , probs = 0.25)
p50 <- quantile(boosting_df$train$pred_final, probs = 0.5)
p75 <- quantile(boosting_df$train$pred_final, probs = 0.75)
p75
boosting_df$train[boosting_df$train$pred_final == p25, ]
boosting_df$train[boosting_df$train$pred_final == p50, ]
boosting_df$train[boosting_df$train$pred_final == p75, ]
sum(boosting_df$train$pred_final == p75)
closest_row_index <- which.min(abs(boosting_df$train$pred_final - p25))
closest_row_index
closest_row <- boosting_df$train[closest_row_index, ]
closest_row
boosting_df$train_factors
boosting_df$train_factors
boosting_df$train_factors_final
models$final$lasso
models$final$lasso$glmnet.fit
models$final$lasso$index
models$final$functional_form_lasso
final_factors
models$final$vanilla
models$final$lasso$
boosting_df
boosting_df$train_factors_final
boosting_df$train_factors
boosting_df$train_factors_final
boosting_df$train_factors
boosting_df$train_factors_final
pred$test$boosted_glm$vanilla
suffix
paste("Data/Boost_data_",suffix,".RData", sep = "")
paste("Data/Boost_data_",suffix,"_raw.RData", sep = "")
suffix <- "freMTPL"
load(paste("Data/Models_",suffix,".RData", sep = ""))
load(paste("Data/Predictions_",suffix,".RData", sep = ""))
load(paste("Data/Univar_effects_",suffix,".RData", sep = ""))
load(paste("Data/Interaction_effects_",suffix,"_raw.RData", sep = ""))
load(paste("Data/Boost_data_",suffix,"_raw.RData", sep = ""))
load(paste("Data/PDP_uni_",suffix,".RData", sep = ""))
load(paste("Data/Boost_data_",suffix,".RData", sep = ""))
boosting_df$train_factors_final
model.matrix(models$final$functional_form_lasso , boosting_df$train_factors_final )
glmnet_data <- model.matrix(models$final$functional_form_lasso , boosting_df$train_factors_final )
glmnet_data_y <- as.matrix(boosting_df$train_factors_final %>% dplyr::select(c(freq,dur)))
glmnet_data
# Get factor values
dim(glmnet_data)
models$final$lasso
coef_info <- coef(models$final$lasso, s = best_lambda)
coef_info
# Get factor values
dim(coef_info)
# Get factor values
dim(glmnet_data)
coef_info
coef_info[-2,]
glmnet_data*coef_info[-2,]
glmnet_data
glmnet_data[1,1:10]
coef_info[-2,][,1:10]
coef_info[-2,][1:10]
glmnet_data[1,1:10]
coef_info[-2,][1:10]*glmnet_data[1,1:10]
closest_row
closest_row_index
final_reg_function <- glmnet_data*coef_info[-2,]
final_reg_function[p25_char,]
closest_row_index_p25 <- which.min(abs(boosting_df$train$pred_final - p25))
p25_char <- boosting_df$train_factors_final[closest_row_index_p25, ]
closest_row_index_p50 <- which.min(abs(boosting_df$train$pred_final - p50))
p50_char <- boosting_df$train_factors_final[closest_row_index_p50, ]
closest_row_index_p75 <- which.min(abs(boosting_df$train$pred_final - p75))
p75_char <- boosting_df$train_factors_final[closest_row_index_p75, ]
final_reg_function[p25_char,]
p25_char
closest_row_index_p25
# Getting percentiles
p25 <- quantile(boosting_df$train$pred_final , probs = 0.25)
p50 <- quantile(boosting_df$train$pred_final, probs = 0.5)
p75 <- quantile(boosting_df$train$pred_final, probs = 0.75)
closest_row_index_p25 <- which.min(abs(boosting_df$train$pred_final - p25))
closest_row_index_p25
p25
boosting_df$train$pred_final
pred$train$boosted_glm$lasso
boosting_df$train["pred_final"] <-pred$train$boosted_glm$lasso
# Getting percentiles
p25 <- quantile(boosting_df$train$pred_final , probs = 0.25)
p50 <- quantile(boosting_df$train$pred_final, probs = 0.5)
p75 <- quantile(boosting_df$train$pred_final, probs = 0.75)
closest_row_index_p25 <- which.min(abs(boosting_df$train$pred_final - p25))
p25_char <- boosting_df$train_factors_final[closest_row_index_p25, ]
closest_row_index_p50 <- which.min(abs(boosting_df$train$pred_final - p50))
p50_char <- boosting_df$train_factors_final[closest_row_index_p50, ]
closest_row_index_p75 <- which.min(abs(boosting_df$train$pred_final - p75))
p75_char <- boosting_df$train_factors_final[closest_row_index_p75, ]
final_reg_function[p25_char,]
p75
closest_row_index_p25
p25_char
final_reg_function[closest_row_index_p25,]
final_reg_function[closest_row_index_p25,]>0
final_reg_function[closest_row_index_p25,final_reg_function[closest_row_index_p25,]>0]
p25_function <- final_reg_function[closest_row_index_p25,final_reg_function[closest_row_index_p25,]>0]
p50_function <- final_reg_function[closest_row_index_p50,final_reg_function[closest_row_index_p50,]>0]
p75_function <- final_reg_function[closest_row_index_p75,final_reg_function[closest_row_index_p75,]>0]
p25_function
p50_function
p50_char
boosting_df$train_factors
p25_char <- boosting_df$train_factors[closest_row_index_p25, ]
closest_row_index_p50 <- which.min(abs(boosting_df$train$pred_final - p50))
p50_char <- boosting_df$train_factors[closest_row_index_p50, ]
closest_row_index_p75 <- which.min(abs(boosting_df$train$pred_final - p75))
p75_char <- boosting_df$train_factors[closest_row_index_p75, ]
p75_char
p75_char <- boosting_df$train[closest_row_index_p75, ]
p75_char
p25_char <- boosting_df$train[closest_row_index_p25, ]
closest_row_index_p50 <- which.min(abs(boosting_df$train$pred_final - p50))
p50_char <- boosting_df$train[closest_row_index_p50, ]
closest_row_index_p75 <- which.min(abs(boosting_df$train$pred_final - p75))
p75_char <- boosting_df$train[closest_row_index_p75, ]
p75_char
p25_function
p25_char
p50_char
p75_char
p50_function
p75_function
plot_folder
# =========================================================================
# =========================================================================
#                         Boosting GLM
# =========================================================================
# =========================================================================
# INIT
setwd("C:/Users/johan.palmquist/OneDrive - FCG Holding Sverige AB/Desktop/Projekt/Supervised GLM/Boosting-GLM")
source("load_packages.r")
load_packages(updateR = FALSE)
# Output parameters --------------------------------------------------
date <- "20220403"
for (data in c("norauto","beMTPL", "auspriv","freMTPL")){ # "norauto","beMTPL", "auspriv","freMTPL"
rm(list = setdiff(ls(),c("data","date")))
new_models <- FALSE
new_univar_effects <- FALSE
new_twoway_effects <- FALSE
scoring_boosting_factors <- FALSE
save <- TRUE
save_last <- TRUE
suffix <- data
plot_folder <- paste("Plottar/",suffix,"_FINAL_",date, sep="")
dir.create(plot_folder)
# Factors
# Factors of interest
if (data == "REAL"){
facts <- c("BOYTA",
"Bolag" ,
"Fast_alder" ,
"Byggnadstyp" ,
"Brevobjekt" ,
"Alder" )
}
if (data == "freMTPL"){
facts <- c("Area"	,
"VehPower"	,
"VehAge" ,
"DrivAge" ,
"VehBrand",
"VehGas",
"Density",
"Region",
"BonusMalus" )
}
if (data == "beMTPL"){ ### OBSOBS: EXCLUDING POSTCODE!!
facts <- c("coverage",
"ageph" ,
"sex",
"bm" ,
"power",
"agec" ,
"fuel",
"use"  ,
"fleet")
}
if (data == "auspriv"){
facts <- c("VehValue",
"VehAge",
"VehBody",
"Gender",
"DrivAge")
}
if (data == "norauto"){
facts <- c("Male",
"Young",
"DistLimit",
"GeoRegion")
}
# Modeling hyperparameters ---------------------------------------------------------
n_trees_mu <- 4000
tree_depth_mu <- 2
learning_rate_mu <- 0.01
train_frac <- 0.8
cal_frac <- 0.3 # Of the training data, how much for calibration of marginal effects?
#source("modeling.r")
source("vis_and_eval.r")
}
# =========================================================================
# =========================================================================
#                         Boosting GLM
# =========================================================================
# =========================================================================
# INIT
setwd("C:/Users/johan.palmquist/OneDrive - FCG Holding Sverige AB/Desktop/Projekt/Supervised GLM/Boosting-GLM")
source("load_packages.r")
load_packages(updateR = FALSE)
# Output parameters --------------------------------------------------
date <- "20220403"
for (data in c("norauto","beMTPL", "auspriv","freMTPL")){ # "norauto","beMTPL", "auspriv","freMTPL"
rm(list = setdiff(ls(),c("data","date")))
new_models <- FALSE
new_univar_effects <- FALSE
new_twoway_effects <- FALSE
scoring_boosting_factors <- FALSE
save <- TRUE
save_last <- TRUE
suffix <- data
plot_folder <- paste("Plottar/",suffix,"_FINAL_",date, sep="")
dir.create(plot_folder)
# Factors
# Factors of interest
if (data == "REAL"){
facts <- c("BOYTA",
"Bolag" ,
"Fast_alder" ,
"Byggnadstyp" ,
"Brevobjekt" ,
"Alder" )
}
if (data == "freMTPL"){
facts <- c("Area"	,
"VehPower"	,
"VehAge" ,
"DrivAge" ,
"VehBrand",
"VehGas",
"Density",
"Region",
"BonusMalus" )
}
if (data == "beMTPL"){ ### OBSOBS: EXCLUDING POSTCODE!!
facts <- c("coverage",
"ageph" ,
"sex",
"bm" ,
"power",
"agec" ,
"fuel",
"use"  ,
"fleet")
}
if (data == "auspriv"){
facts <- c("VehValue",
"VehAge",
"VehBody",
"Gender",
"DrivAge")
}
if (data == "norauto"){
facts <- c("Male",
"Young",
"DistLimit",
"GeoRegion")
}
# Modeling hyperparameters ---------------------------------------------------------
n_trees_mu <- 4000
tree_depth_mu <- 2
learning_rate_mu <- 0.01
train_frac <- 0.8
cal_frac <- 0.3 # Of the training data, how much for calibration of marginal effects?
#source("modeling.r")
source("vis_and_eval.r")
}
plot_folder
# INIT
setwd("C:/Users/johan.palmquist/OneDrive - FCG Holding Sverige AB/Desktop/Projekt/Supervised GLM/Boosting-GLM")
p
# Plotting
p <- ggplot(coef_df, aes(x = reorder(factor_name, sum_VI), y = sum_VI)) +
geom_bar(stat = "identity", fill = "skyblue") +
coord_flip() + # This flips the axes to make it a horizontal bar plot
xlab("Factor Name") +
ylab("Variable Importance") +
ggtitle("Variable Importance Plot") +
theme_classic()
p
# =========================================================================
# =========================================================================
#                         Boosting GLM
# =========================================================================
# =========================================================================
# INIT
setwd("C:/Users/johan.palmquist/OneDrive - FCG Holding Sverige AB/Desktop/Projekt/Supervised GLM/Boosting-GLM")
source("load_packages.r")
load_packages(updateR = FALSE)
# Output parameters --------------------------------------------------
date <- "20220403"
for (data in c("norauto","beMTPL", "auspriv","freMTPL")){ # "norauto","beMTPL", "auspriv","freMTPL"
rm(list = setdiff(ls(),c("data","date")))
new_models <- FALSE
new_univar_effects <- FALSE
new_twoway_effects <- FALSE
scoring_boosting_factors <- FALSE
save <- TRUE
save_last <- TRUE
suffix <- data
plot_folder <- paste("Plottar/",suffix,"_FINAL_",date, sep="")
dir.create(plot_folder)
# Factors
# Factors of interest
if (data == "REAL"){
facts <- c("BOYTA",
"Bolag" ,
"Fast_alder" ,
"Byggnadstyp" ,
"Brevobjekt" ,
"Alder" )
}
if (data == "freMTPL"){
facts <- c("Area"	,
"VehPower"	,
"VehAge" ,
"DrivAge" ,
"VehBrand",
"VehGas",
"Density",
"Region",
"BonusMalus" )
}
if (data == "beMTPL"){ ### OBSOBS: EXCLUDING POSTCODE!!
facts <- c("coverage",
"ageph" ,
"sex",
"bm" ,
"power",
"agec" ,
"fuel",
"use"  ,
"fleet")
}
if (data == "auspriv"){
facts <- c("VehValue",
"VehAge",
"VehBody",
"Gender",
"DrivAge")
}
if (data == "norauto"){
facts <- c("Male",
"Young",
"DistLimit",
"GeoRegion")
}
# Modeling hyperparameters ---------------------------------------------------------
n_trees_mu <- 4000
tree_depth_mu <- 2
learning_rate_mu <- 0.01
train_frac <- 0.8
cal_frac <- 0.3 # Of the training data, how much for calibration of marginal effects?
#source("modeling.r")
source("vis_and_eval.r")
}
suffix <- "freMTPL"
load(paste("Data/Models_",suffix,".RData", sep = ""))
load(paste("Data/Predictions_",suffix,".RData", sep = ""))
load(paste("Data/Univar_effects_",suffix,".RData", sep = ""))
load(paste("Data/Interaction_effects_",suffix,"_raw.RData", sep = ""))
load(paste("Data/Boost_data_",suffix,"_raw.RData", sep = ""))
load(paste("Data/PDP_uni_",suffix,".RData", sep = ""))
num_facts <-  colnames(boosting_df$train[,facts])[sapply(boosting_df$train %>% dplyr::select(facts),class) %in% c("numeric","integer")]
load(paste("Data/Boost_data_",suffix,".RData", sep = ""))
boosting_df$train["pred_final"] <-pred$train$boosted_glm$lasso
glmnet_data <- model.matrix(models$final$functional_form_lasso , boosting_df$train_factors_final )
# Getting percentiles
p25 <- quantile(boosting_df$train$pred_final , probs = 0.25)
p50 <- quantile(boosting_df$train$pred_final, probs = 0.5)
p75 <- quantile(boosting_df$train$pred_final, probs = 0.75)
closest_row_index_p25 <- which.min(abs(boosting_df$train$pred_final - p25))
p25_char <- boosting_df$train[closest_row_index_p25, ]
closest_row_index_p50 <- which.min(abs(boosting_df$train$pred_final - p50))
p50_char <- boosting_df$train[closest_row_index_p50, ]
closest_row_index_p75 <- which.min(abs(boosting_df$train$pred_final - p75))
p75_char <- boosting_df$train[closest_row_index_p75, ]
# Get factor values
dim(glmnet_data)
final_reg_function <- glmnet_data*coef_info[-2,]
p25_function <- final_reg_function[closest_row_index_p25,final_reg_function[closest_row_index_p25,]>0]
p50_function <- final_reg_function[closest_row_index_p50,final_reg_function[closest_row_index_p50,]>0]
p75_function <- final_reg_function[closest_row_index_p75,final_reg_function[closest_row_index_p75,]>0]
p25_function
p50_function
p50_char
closest_row_index_p50
# Get factor values
dim(glmnet_data)
final_reg_function <- glmnet_data*coef_info[-2,]
final_reg_function
closest_row_index_p50
final_reg_function
p50_function
p25_function
final_reg_function
glmnet_data
coef_info
glmnet_data[1]
glmnet_data[[1]]
glmnet_data[1:2]
glmnet_data[1:22]
t(coef_info[-2,])
final_reg_function <- glmnet_data*t(coef_info[-2,])
final_reg_function
dim(glmnet_data)
dim(coef_info)
dim(coef_info[-2,])
coef_info[-2,]
dim(coef_info[-2,])
dim(as.numeric(coef_info[-2,]))
dim(as.matrix(coef_info[-2,]))
final_reg_function <- glmnet_data*t(as.matrix(coef_info[-2,]))
final_reg_function <- glmnet_data*as.matrix(coef_info[-2,])
dim(as.matrix(coef_info[-2,]))
dim(glmnet_data)
final_reg_function <- glmnet_data*t(as.matrix(coef_info[-2,]))
final_reg_function <- as.matrix(glmnet_data)*t(as.matrix(coef_info[-2,]))
as.matrix(glmnet_data)
as.data.frame(glmnet_data)
final_reg_function <- as.data.frame(glmnet_data)*t(as.matrix(coef_info[-2,]))
final_reg_function
final_reg_function <- as.data.frame(glmnet_data)*as.matrix(coef_info[-2,])
head(final_reg_function)
final_reg_function$`(Intercept)`
dim(glmnet_data)
dim(as.matrix(coef_info[-2,]))
as.numeric(coef_info[-2,])
final_reg_function <- as.data.frame(glmnet_data)*as.numeric(coef_info[-2,])
final_reg_function$`(Intercept)`
as.numeric(coef_info[-2,])
final_reg_function <-sweep(as.data.frame(glmnet_data), MARGIN = 2, STATS = as.numeric(coef_info[-2,]), FUN = "*")
final_reg_function$`(Intercept)`
final_reg_function
p25_function <- final_reg_function[closest_row_index_p25,final_reg_function[closest_row_index_p25,]>0]
p50_function <- final_reg_function[closest_row_index_p50,final_reg_function[closest_row_index_p50,]>0]
p75_function <- final_reg_function[closest_row_index_p75,final_reg_function[closest_row_index_p75,]>0]
p25_function
p50_function
final_reg_function
p25_function <- final_reg_function[closest_row_index_p25,final_reg_function[closest_row_index_p25,]!= 0]
p25_function
p50_function <- final_reg_function[closest_row_index_p50,final_reg_function[closest_row_index_p50,] != 0]
p75_function <- final_reg_function[closest_row_index_p75,final_reg_function[closest_row_index_p75,] != 0]
p25_function
p50_function
p75_function
