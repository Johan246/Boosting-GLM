boosting_df$test_factors_final[fact] <- predict(tree_temp, newdata = boosting_df$test_factors)*boosting_df$test_factors$dur
# Updating PDP-values
if (fact %in% facts) {
temp_data <-  data.frame(val = univariate_pdp_data_complete[[fact]]$Ref_gbm_interpol)
names(temp_data) <- fact
univariate_pdp_data_complete[[fact]]$Final_model <- mean(boosting_df$train$freq) + predict(tree_temp, newdata = temp_data)
}
}
boosting_df$train_factors_final <- data.frame(boosting_df$train_factors_final, boosting_df$train[, cat_facts])
boosting_df$cal_factors_final <- data.frame(boosting_df$cal_factors_final, boosting_df$cal[, cat_facts])
boosting_df$test_factors_final <- data.frame(boosting_df$test_factors_final, boosting_df$test[, cat_facts])
final_factors <- apply(boosting_df$train_factors_final,2, FUN= function(x) length(unique(x)))
final_factors
prune_cp_glm
tree_temp
final_factors <- apply(boosting_df$train_factors_final/boosting_df$train_factors_final$dur,2, FUN= function(x) length(unique(x)))
predict(tree_temp, newdata = temp_data)
temp_data <-  data.frame(val = univariate_pdp_data_complete[[fact]]$Ref_gbm_interpol)
names(temp_data) <- fact
univariate_pdp_data_complete[[fact]]$Final_model <- predict(tree_temp, newdata = temp_data)
univariate_pdp_data_complete
temp_data
tree_control = rpart.control(minbucket=10, cp=0.00001)
all_facts <- names(boosting_df$train_factors %>% dplyr::select(-c("freq","dur")))
boosting_df$train_factors_final <- boosting_df$train_factors
boosting_df$cal_factors_final <- boosting_df$cal_factors
boosting_df$test_factors_final <-  boosting_df$test_factors
for (fact in all_facts){
model_trees <- formula(eval(paste("freq ~ ", fact, sep="")))
tree_deep <- rpart(model_trees,
data = boosting_df$train_factors %>% mutate(freq = freq/dur),
method = "anova",
weights = dur,
control = tree_control )
# Pruning
prune_cp_glm <- tree_deep$cptable[which.min(tree_deep$cptable[, "xerror"]), "CP"]
tree_temp <- prune.rpart(tree_deep, cp = prune_cp_glm)
## Updating final factors
boosting_df$train_factors_final[fact] <- predict(tree_temp, newdata = boosting_df$train_factors)
boosting_df$cal_factors_final[fact] <- predict(tree_temp, newdata = boosting_df$cal_factors)
boosting_df$test_factors_final[fact] <- predict(tree_temp, newdata = boosting_df$test_factors)
# Updating PDP-values
if (fact %in% facts) {
temp_data <-  data.frame(val = univariate_pdp_data_complete[[fact]]$Ref_gbm_interpol)
names(temp_data) <- fact
univariate_pdp_data_complete[[fact]]$Final_model <- predict(tree_temp, newdata = temp_data)
}
}
boosting_df$train_factors_final <- data.frame(boosting_df$train_factors_final, boosting_df$train[, cat_facts])
boosting_df$cal_factors_final <- data.frame(boosting_df$cal_factors_final, boosting_df$cal[, cat_facts])
boosting_df$test_factors_final <- data.frame(boosting_df$test_factors_final, boosting_df$test[, cat_facts])
final_factors <- apply(boosting_df$train_factors_final,2, FUN= function(x) length(unique(x)))
final_factors
model.freq_glm.final <- formula(freq ~   factor(VehPower) +  factor(VehAge) + factor(DrivAge) + factor(BonusMalus) + factor(Density) +
factor(Area) + factor(VehBrand) + factor(VehGas) + factor(Region) +
factor(DrivAgeBonusMalus) + factor(VehAgeVehBrand) +factor(VehAgeVehGas)  + factor(VehPowerVehBrand) + factor(DrivAgeRegion) +
offset(log(dur)))
final_factors <- final_factors[final_factors>1]
final_factors
final_factors <- final_factors[final_factors>1] %>% dplyr::select(-c("dur","freq"))
final_factors
final_factors <- final_factors[final_factors>1] %>% dplyr::select(-c(dur,freq))
final_factors <- final_factors[final_factors>1]
final_factors <- final_factors[,-c("freq")]
final_factors <- final_factors[,-c("freq","dur")]
final_factors <- names(final_factors[final_factors>1]) %>% dplyr::select(-dur)
final_factors <- names(final_factors[final_factors>1]) %>% dplyr::select(-"dur")
final_factors <- names(final_factors[final_factors>1])
final_factors
final_factors <- final_factors[!final_factors %in% c("dur", "freq")]
final_factors
final_factors <- apply(boosting_df$train_factors_final,2, FUN= function(x) length(unique(x)))
final_factors <- names(final_factors[final_factors>1])
final_factors <- final_factors[!final_factors %in% c("dur", "freq")]
final_factors
final_model
final_model <- paste0("[1]\"", paste(string, collapse = "\", \""), "\"")
final_model <- paste0("[1]\"", paste(final_factors, collapse = "\", \""), "\"")
final_model
final_model <- paste(final_factors, collapse = "\", \"")
final_model
final_model <- paste(final_factors, collapse = "")
final_model
final_model <- paste(final_factors, collapse = "+ ")
final_model
final_model <- formula(eval(paste("freq ~ ", paste(final_factors, collapse = " + ") , sep="")))
final_model
final_model_offset <- formula(eval(paste("freq ~ ", paste(final_factors, collapse = " + "), "offset(log(dur))" , sep="")))
final_model_offset
final_model_offset <- formula(eval(paste("freq ~ ", paste(final_factors, collapse = " + "), " + offset(log(dur))" , sep="")))
final_model_offset
model.freq_glm.final
model.freq_glm.final <- formula(eval(paste("freq ~ ", paste(final_factors, collapse = ") + factor("), " + offset(log(dur))" , sep="")))
model.freq_glm.final
model.freq_glm.final <- formula(eval(paste("freq ~ ", paste(final_factors, collapse = ") + factor("), " + offset(log(dur))" , sep="")))
model.freq_glm.final
model.freq_glm.final <- formula(eval(paste("freq ~ ", paste(final_factors, collapse = ") + factor(" , " + offset(log(dur))" , sep="")))
model.freq_glm.final
model.freq_glm.final <- formula(eval(paste("freq ~ ", paste(final_factors, collapse = ") + factor(" ), " + offset(log(dur))" , sep=""))
model.freq_glm.final <- formula(eval(paste("freq ~ ", paste(final_factors, collapse = ") + factor(" ), " + offset(log(dur))" , sep="")))
model.freq_glm.final
model.freq_glm.final <- formula(eval(paste("freq ~ factor(", paste(final_factors, collapse = ") + factor(" ), " + offset(log(dur))" , sep="")))
paste(final_factors, collapse = ") + factor(" )
model.freq_glm.final <- formula(eval(paste("freq ~ factor(", paste(final_factors, collapse = ") + factor(" ), ") + offset(log(dur))" , sep="")))
model.freq_glm.final
model.freq_glm.final1 <- formula(eval(paste("freq ~ factor(", paste(final_factors, collapse = ") + factor(" ), ") + offset(log(dur))" , sep="")))
model.freq_glm.final1
model.freq_glm.final_lasso <- formula(eval(paste("freq ~ factor(", paste(final_factors, collapse = ") + factor(" ), ")" , sep="")))
model.freq_glm.final_lasso
model.freq_glm.final_lasso1 <- formula(eval(paste("freq ~ factor(", paste(final_factors, collapse = ") + factor(" ), ")" , sep="")))
model.freq_glm.final_lasso1
final_factors <- apply(boosting_df$train_factors_final,2, FUN= function(x) length(unique(x)))
final_factors <- names(final_factors[final_factors>1])
final_factors <- final_factors[!final_factors %in% c("dur", "freq")]
# Models
model.freq_glm.final <- formula(eval(paste("freq ~ factor(", paste(final_factors, collapse = ") + factor(" ), ") + offset(log(dur))" , sep="")))
model.freq_glm.final_lasso <- formula(eval(paste("freq ~ factor(", paste(final_factors, collapse = ") + factor(" ), ")" , sep="")))
models$final$vanilla  <- glm(model.freq_glm.final,
data = boosting_df$train_factors_final,
family = quasipoisson(link = "log"))
models$final$vanilla
summary(models$final$vanilla )
# Lasso GLM
model.freq_glm.final_lasso <- formula(freq ~   factor(VehPower) +  factor(VehAge) + factor(DrivAge) + factor(BonusMalus) + factor(Density) + factor(DrivAgeRegion) +
factor(Area) + factor(VehBrand) + factor(VehGas) + factor(Region) +
factor(DrivAgeBonusMalus) + factor(VehAgeVehBrand) + factor(VehAgeVehGas)  + factor(VehPowerVehBrand)
)
glmnet_data <- model.matrix(model.freq_glm.final_lasso , boosting_df$train_factors_final )
# Finalizing factors
plot(models$final$lasso)
# Models
model.freq_glm.final <- formula(eval(paste("freq ~ factor(", paste(final_factors, collapse = ") + factor(" ), ") + offset(log(dur))" , sep="")))
model.freq_glm.final_lasso <- formula(eval(paste("freq ~ factor(", paste(final_factors, collapse = ") + factor(" ), ")" , sep="")))
glmnet_data <- model.matrix(model.freq_glm.final_lasso , boosting_df$train_factors_final )
glmnet_data_y <- as.matrix(boosting_df$train_factors_final %>% dplyr::select(c(freq,dur)))
models$final$lasso  <- cv.glmnet(x = glmnet_data,
y = glmnet_data_y[,"freq"],
intercept=T ,
offset = log(glmnet_data_y[,"dur"]),
family = poisson(link = "log"),
alpha = 1,
nfolds = 5,
lambda = seq(0, 0.1, length.out=100))
# Finalizing factors
plot(models$final$lasso)
best_lambda <- unique(models$final$lasso$lambda[min(models$final$lasso$cvm) == models$final$lasso$cvm])
best_lambda
# Final factors -----------------------------------------------------------
coef(models$final$lasso)
summary(models$final$vanilla)
summary(models$final$vanilla_no_inter)
# Final factors -----------------------------------------------------------
coef(models$final$lasso)
# Predictions  -------------------------------------------------
pred$train$boosted_glm$vanilla <- as.numeric(predict.glm(models$final$vanilla, newdat=boosting_df$train_factors_final, type="response", newoffset=boosting_df$train_factors_final$dur))
pred$cal$boosted_glm$vanilla <- sapply(as.numeric(predict.glm(models$final$vanilla, newdat=boosting_df$cal_factors_final, type="response"), newoffset=boosting_df$cal_factors_final$dur), function(x) min(x,2)) # Ugly fix of one extreme value
pred$test$boosted_glm$vanilla <- sapply(as.numeric(predict.glm(models$final$vanilla, newdat=boosting_df$test_factors_final, type="response") , newoffset=boosting_df$test_factors_final$dur ) , function(x) min(x,2))
pred$train$boosted_glm$lasso <- as.numeric(predict(models$final$lasso,  newx = model.matrix(model.freq_glm.final_lasso , boosting_df$train_factors_final ), type = "response",  s = best_lambda, newoffset = log(boosting_df$train_factors_final$dur) ))
pred$cal$boosted_glm$lasso <- as.numeric(predict(models$final$lasso, newx = model.matrix(model.freq_glm.final_lasso , boosting_df$cal_factors_final ), type = "response", s = best_lambda, newoffset = log(boosting_df$cal_factors$dur)))
pred$test$boosted_glm$lasso <- as.numeric(predict(models$final$lasso, newx = model.matrix(model.freq_glm.final_lasso , boosting_df$test_factors_final ), type = "response", s = best_lambda, newoffset = log(boosting_df$test_factors$dur)))
# Balance check  -------------------------------------------------
mean(boosting_df$train$freq)
mean(pred$train$boosted_glm$vanilla)
mean(pred$train$boosted_glm$vanilla_no_inter)
mean(pred$train$boosted_glm$lasso)
# Extracting lasso values
row_names <- rownames(coef(models$final$lasso))
factors <- sub(".*\\((.*)\\).*", "\\1", row_names)
factor_values <- sub(".*\\)(.*)$", "\\1", row_names)
coef_values <- coef(models$final$lasso)
coef_values <- as.numeric(as.matrix(coef_values))
coef_values[is.na(coef_values)] <- 0
# Adjusting model values
for (fact in num_facts){
temp_pdp_val <- round(univariate_pdp_data[[fact]]$Final_model  -   mean(boosting_df$train$freq),6)
temp_coef_level <- round(as.numeric(factor_values[which(factors==fact) ]),6)
temp_coef_val <- round(as.numeric(coef_values[which(factors==fact) ]),6)
temp_new_pdp_val <- rep(0, length(temp_pdp_val))
for (i in 1:length(temp_pdp_val)){
if( any(temp_pdp_val[i] == temp_coef_level)){
idx <- which(temp_pdp_val[i] == temp_coef_level)
temp_new_pdp_val[i] <- temp_coef_val[idx]
}
}
univariate_pdp_data[[fact]]$Final_model_lasso <- exp(temp_new_pdp_val)*mean(boosting_df$train$freq)
}
row_names
coef_values
temp_pdp_val
temp_coef_level
num_facts
fact
temp_pdp_val <- round(univariate_pdp_data[[fact]]$Final_model  -   mean(boosting_df$train$freq),6)
temp_coef_level <- round(as.numeric(factor_values[which(factors==fact) ]),6)
temp_coef_val <- round(as.numeric(coef_values[which(factors==fact) ]),6)
temp_pdp_val
univariate_pdp_data[[fact]]$Final_model
univariate_pdp_data
temp_data
temp_data <-  data.frame(val = univariate_pdp_data_complete[[fact]]$Ref_gbm_interpol)
names(temp_data) <- fact
univariate_pdp_data_complete[[fact]]$Final_model <- predict(tree_temp, newdata = temp_data)*mean(boosting_df$train_factors$freq)
univariate_pdp_data_complete
univariate_pdp_data
univariate_pdp_data_complete
temp_pdp_val <- round(univariate_pdp_data[[fact]]$Final_model  -   mean(boosting_df$train$freq),6)
temp_coef_level <- round(as.numeric(factor_values[which(factors==fact) ]),6)
temp_coef_val <- round(as.numeric(coef_values[which(factors==fact) ]),6)
temp_new_pdp_val <- rep(0, length(temp_pdp_val))
temp_pdp_val
temp_coef_level
temp_coef_val
temp_pdp_val <- round(univariate_pdp_data_complete[[fact]]$Final_model  -   mean(boosting_df$train$freq),6)
temp_pdp_val
temp_pdp_val <- round(univariate_pdp_data_complete[[fact]]$Final_model ,6)
temp_pdp_val
temp_coef_level <- round(as.numeric(factor_values[which(factors==fact) ]),6)
temp_coef_level
temp_coef_val <- round(as.numeric(coef_values[which(factors==fact) ]),6)
temp_coef_val
temp_coef_val
temp_new_pdp_val <- rep(0, length(temp_pdp_val))
for (i in 1:length(temp_pdp_val)){
if( any(temp_pdp_val[i] == temp_coef_level)){
idx <- which(temp_pdp_val[i] == temp_coef_level)
temp_new_pdp_val[i] <- temp_coef_val[idx]
}
}
temp_new_pdp_val
temp_new_pdp_val <- rep(mean(boosting_df$train$freq), length(temp_pdp_val))
temp_new_pdp_val
if( any(temp_pdp_val[i] == temp_coef_level)){
idx <- which(temp_pdp_val[i] == temp_coef_level)
temp_new_pdp_val[i] <- temp_coef_val[idx]
}
for (i in 1:length(temp_pdp_val)){
if( any(temp_pdp_val[i] == temp_coef_level)){
idx <- which(temp_pdp_val[i] == temp_coef_level)
temp_new_pdp_val[i] <- temp_coef_val[idx]
}
}
temp_new_pdp_val
univariate_pdp_data[[fact]]$Final_model_lasso <- exp(temp_new_pdp_val)*mean(boosting_df$train$freq)
univariate_pdp_data[[fact]]$Final_model_lasso <- temp_new_pdp_val
univariate_pdp_data
univariate_pdp_data[[fact]]
univariate_pdp_data[[fact]]$Final_model_lasso <- temp_new_pdp_val
univariate_pdp_data_complete
fact
# Adjusting model values
for (fact in num_facts){
temp_pdp_val <- round(univariate_pdp_data_complete[[fact]]$Final_model ,6)
temp_coef_level <- round(as.numeric(factor_values[which(factors==fact) ]),6)
temp_coef_val <- round(as.numeric(coef_values[which(factors==fact) ]),6)
temp_new_pdp_val <- rep(mean(boosting_df$train$freq), length(temp_pdp_val))
for (i in 1:length(temp_pdp_val)){
if( any(temp_pdp_val[i] == temp_coef_level)){
idx <- which(temp_pdp_val[i] == temp_coef_level)
temp_new_pdp_val[i] <- temp_coef_val[idx]
}
}
univariate_pdp_data[[fact]]$Final_model_lasso <- temp_new_pdp_val
}
fact
num_facts
round(univariate_pdp_data_complete[[fact]]$Final_model ,6)
univariate_pdp_data_complete[[fact]]$Final_model
univariate_pdp_data_complete
temp_coef_level <- round(as.numeric(factor_values[which(factors==fact) ]),6)
temp_coef_val <- round(as.numeric(coef_values[which(factors==fact) ]),6)
temp_new_pdp_val <- rep(mean(boosting_df$train$freq), length(temp_pdp_val))
temp_new_pdp_val
for (i in 1:length(temp_pdp_val)){
if( any(temp_pdp_val[i] == temp_coef_level)){
idx <- which(temp_pdp_val[i] == temp_coef_level)
temp_new_pdp_val[i] <- temp_coef_val[idx]
}
}
univariate_pdp_data_complete[[fact]]$Final_model_lasso <- temp_new_pdp_val
univariate_pdp_data_complete[[fact]]
# Adjusting model values
for (fact in num_facts){
temp_pdp_val <- round(univariate_pdp_data_complete[[fact]]$Final_model ,6)
temp_coef_level <- round(as.numeric(factor_values[which(factors==fact) ]),6)
temp_coef_val <- round(as.numeric(coef_values[which(factors==fact) ]),6)
temp_new_pdp_val <- rep(mean(boosting_df$train$freq), length(temp_pdp_val))
for (i in 1:length(temp_pdp_val)){
if( any(temp_pdp_val[i] == temp_coef_level)){
idx <- which(temp_pdp_val[i] == temp_coef_level)
temp_new_pdp_val[i] <- temp_coef_val[idx]
}
}
univariate_pdp_data_complete[[fact]]$Final_model_lasso <- temp_new_pdp_val
}
# Adjusting model values
for (fact in num_facts){
temp_pdp_val <- round(univariate_pdp_data_complete[[fact]]$Final_model ,6)
temp_coef_level <- round(as.numeric(factor_values[which(factors==fact) ]),6)
temp_coef_val <- round(as.numeric(coef_values[which(factors==fact) ]),6)
temp_new_pdp_val <- rep(mean(boosting_df$train$freq), length(temp_pdp_val))
for (i in 1:length(temp_pdp_val)){
if( any(temp_pdp_val[i] == temp_coef_level)){
idx <- which(temp_pdp_val[i] == temp_coef_level)
temp_new_pdp_val[i] <- temp_coef_val[idx]
}
}
univariate_pdp_data_complete[[fact]]$Final_model_lasso <- temp_new_pdp_val
}
for  (fact in num_facts){
univariate_pdp_data[[fact]]$Final_model <-  univariate_pdp_data[[fact]]$Final_model/mean( univariate_pdp_data[[fact]]$Final_model)*mean( univariate_pdp_data[[fact]]$Ref_gbm)
univariate_pdp_data[[fact]]$Final_model_lasso <-  univariate_pdp_data[[fact]]$Final_model_lasso/mean( univariate_pdp_data[[fact]]$Final_model_lasso)*mean( univariate_pdp_data[[fact]]$Ref_gbm)
}
for  (fact in num_facts){
univariate_pdp_data_complete[[fact]]$Final_model <-  univariate_pdp_data[[fact]]$Final_model/mean( univariate_pdp_data[[fact]]$Final_model)*mean( univariate_pdp_data[[fact]]$Ref_gbm)
univariate_pdp_data_complete[[fact]]$Final_model_lasso <-  univariate_pdp_data[[fact]]$Final_model_lasso/mean( univariate_pdp_data[[fact]]$Final_model_lasso)*mean( univariate_pdp_data[[fact]]$Ref_gbm)
}
for  (fact in num_facts){
univariate_pdp_data_complete[[fact]]$Final_model <-  univariate_pdp_data_complete[[fact]]$Final_model/mean( univariate_pdp_data_complete[[fact]]$Final_model)*mean( univariate_pdp_data_complete[[fact]]$Ref_gbm)
univariate_pdp_data_complete[[fact]]$Final_model_lasso <-  univariate_pdp_data_complete[[fact]]$Final_model_lasso/mean( univariate_pdp_data_complete[[fact]]$Final_model_lasso)*mean( univariate_pdp_data_complete[[fact]]$Ref_gbm)
}
if (save == TRUE){
save(models, file = paste("Data/Models_",suffix,".RData", sep = ""))
save(boosting_df, file = paste("Data/Boost_data_",suffix,".RData", sep = ""))
save(pred, file = paste("Data/Predictions_",suffix,".RData", sep = ""))
save(univariate_pdp_data_complete, file = paste("Data/PDP_uni_",suffix,".RData", sep = ""))
}
for (fact in num_facts){
p <-  univariate_pdp_data_complete[[fact]] %>%
ggplot(aes(x=factor_val))+
geom_line(aes(y=Tariff, color="black")) +
geom_line(aes(y=Final_model, color="red"))+
geom_line(aes(y=Ref_gbm, color="grey"), lty=2) +
geom_line(aes(y=Final_model_lasso, color="blue"))+
geom_abline(intercept = mean(df$train$freq),slope=0, color="grey", alpha=0.5)+
#xlim(xlim[1],xlim[2])+
labs(x= fact,
y="PDP" )+
scale_colour_manual(name = '',
values =c('black'='black','red'='red','grey'='grey','blue'='blue'),
labels = c('Linear','Final GLM','GBM (PDP)','After trees')
)+
scale_y_continuous(sec.axis = sec_axis( trans= ~./mean(df$train$freq), name="Boosting factor")) +
theme_classic() +
theme(legend.position ="bottom")
ggsave(filename = paste(plot_folder,"/PDP_boost_",fact , ".png",sep=""), plot = p, dpi = 300,width = 10, height = 8)
}
univariate_pdp_data_complete
univariate_pdp_data_complete[[fact]]$Final_model <-  univariate_pdp_data_complete[[fact]]$Final_model/mean( univariate_pdp_data_complete[[fact]]$Ref_gbm)*mean( univariate_pdp_data_complete[[fact]]$Final_model)
univariate_pdp_data_complete
for  (fact in num_facts){
univariate_pdp_data_complete[[fact]]$Final_model <-  univariate_pdp_data_complete[[fact]]$Final_model/mean( univariate_pdp_data_complete[[fact]]$Ref_gbm)*mean( univariate_pdp_data_complete[[fact]]$Final_model)
univariate_pdp_data_complete[[fact]]$Final_model_lasso <-  univariate_pdp_data_complete[[fact]]$Final_model_lasso/mean( univariate_pdp_data_complete[[fact]]$Ref_gbm)*mean( univariate_pdp_data_complete[[fact]]$Final_model_lasso)
}
univariate_pdp_data_complete
for (fact in all_facts){
model_trees <- formula(eval(paste("freq ~ ", fact, sep="")))
tree_deep <- rpart(model_trees,
data = boosting_df$train_factors %>% mutate(freq = freq/dur),
method = "anova",
weights = dur,
control = tree_control )
# Pruning
prune_cp_glm <- tree_deep$cptable[which.min(tree_deep$cptable[, "xerror"]), "CP"]
tree_temp <- prune.rpart(tree_deep, cp = prune_cp_glm)
## Updating final factors
boosting_df$train_factors_final[fact] <- predict(tree_temp, newdata = boosting_df$train_factors)
boosting_df$cal_factors_final[fact] <- predict(tree_temp, newdata = boosting_df$cal_factors)
boosting_df$test_factors_final[fact] <- predict(tree_temp, newdata = boosting_df$test_factors)
# Updating PDP-values
if (fact %in% facts) {
temp_data <-  data.frame(val = univariate_pdp_data_complete[[fact]]$Ref_gbm_interpol)
names(temp_data) <- fact
univariate_pdp_data_complete[[fact]]$Final_model <- predict(tree_temp, newdata = temp_data)*mean(boosting_df$train_factors$freq)
}
}
univariate_pdp_data_complete
# Extracting lasso values
row_names <- rownames(coef(models$final$lasso))
factors <- sub(".*\\((.*)\\).*", "\\1", row_names)
factor_values <- sub(".*\\)(.*)$", "\\1", row_names)
coef_values <- coef(models$final$lasso)
coef_values <- as.numeric(as.matrix(coef_values))
coef_values[is.na(coef_values)] <- 0
# Adjusting model values
for (fact in num_facts){
temp_pdp_val <- round(univariate_pdp_data_complete[[fact]]$Final_model ,6)
temp_coef_level <- round(as.numeric(factor_values[which(factors==fact) ]),6)
temp_coef_val <- round(as.numeric(coef_values[which(factors==fact) ]),6)
temp_new_pdp_val <- rep(mean(boosting_df$train$freq), length(temp_pdp_val))
for (i in 1:length(temp_pdp_val)){
if( any(temp_pdp_val[i] == temp_coef_level)){
idx <- which(temp_pdp_val[i] == temp_coef_level)
temp_new_pdp_val[i] <- temp_coef_val[idx]
}
}
univariate_pdp_data_complete[[fact]]$Final_model_lasso <- temp_new_pdp_val
}
univariate_pdp_data_complete
# Adding back categoricals
boosting_df$train_factors_final <- data.frame(boosting_df$train_factors_final, boosting_df$train[, cat_facts])
boosting_df$cal_factors_final <- data.frame(boosting_df$cal_factors_final, boosting_df$cal[, cat_facts])
boosting_df$test_factors_final <- data.frame(boosting_df$test_factors_final, boosting_df$test[, cat_facts])
# ======================================================================
##  FINAL GLM-modeling - Training GLM on extracted factor effects   ##
# ======================================================================
final_factors <- apply(boosting_df$train_factors_final,2, FUN= function(x) length(unique(x)))
final_factors <- names(final_factors[final_factors>1])
final_factors <- final_factors[!final_factors %in% c("dur", "freq")]
# Models
model.freq_glm.final <- formula(eval(paste("freq ~ factor(", paste(final_factors, collapse = ") + factor(" ), ") + offset(log(dur))" , sep="")))
model.freq_glm.final_lasso <- formula(eval(paste("freq ~ factor(", paste(final_factors, collapse = ") + factor(" ), ")" , sep="")))
# Vanilla GLM -------------------------------------------------------------
models$final$vanilla  <- glm(model.freq_glm.final,
data = boosting_df$train_factors_final,
family = quasipoisson(link = "log"))
# Lasso GLM -------------------------------------------------------------
glmnet_data <- model.matrix(model.freq_glm.final_lasso , boosting_df$train_factors_final )
glmnet_data_y <- as.matrix(boosting_df$train_factors_final %>% dplyr::select(c(freq,dur)))
models$final$lasso  <- cv.glmnet(x = glmnet_data,
y = glmnet_data_y[,"freq"],
intercept=T ,
offset = log(glmnet_data_y[,"dur"]),
family = poisson(link = "log"),
alpha = 1,
nfolds = 5,
lambda = seq(0, 0.1, length.out=100))
# Finalizing factors
plot(models$final$lasso)
best_lambda <- unique(models$final$lasso$lambda[min(models$final$lasso$cvm) == models$final$lasso$cvm])
# Final factors -----------------------------------------------------------
coef(models$final$lasso)
summary(models$final$vanilla)
# Predictions  -------------------------------------------------
pred$train$boosted_glm$vanilla <- as.numeric(predict.glm(models$final$vanilla, newdat=boosting_df$train_factors_final, type="response", newoffset=boosting_df$train_factors_final$dur))
pred$cal$boosted_glm$vanilla <- sapply(as.numeric(predict.glm(models$final$vanilla, newdat=boosting_df$cal_factors_final, type="response"), newoffset=boosting_df$cal_factors_final$dur), function(x) min(x,2))
pred$test$boosted_glm$vanilla <- sapply(as.numeric(predict.glm(models$final$vanilla, newdat=boosting_df$test_factors_final, type="response") , newoffset=boosting_df$test_factors_final$dur ) , function(x) min(x,2))
pred$train$boosted_glm$lasso <- as.numeric(predict(models$final$lasso,  newx = model.matrix(model.freq_glm.final_lasso , boosting_df$train_factors_final ), type = "response",  s = best_lambda, newoffset = log(boosting_df$train_factors_final$dur) ))
pred$cal$boosted_glm$lasso <- as.numeric(predict(models$final$lasso, newx = model.matrix(model.freq_glm.final_lasso , boosting_df$cal_factors_final ), type = "response", s = best_lambda, newoffset = log(boosting_df$cal_factors$dur)))
pred$test$boosted_glm$lasso <- as.numeric(predict(models$final$lasso, newx = model.matrix(model.freq_glm.final_lasso , boosting_df$test_factors_final ), type = "response", s = best_lambda, newoffset = log(boosting_df$test_factors$dur)))
# Balance check  -------------------------------------------------
mean(boosting_df$train$freq)
mean(pred$train$boosted_glm$vanilla)
mean(pred$train$boosted_glm$lasso)
# ======================================================================
##  Defining final models: Updating PDP according to lasso selections ##
# ======================================================================
# Extracting lasso values
row_names <- rownames(coef(models$final$lasso))
factors <- sub(".*\\((.*)\\).*", "\\1", row_names)
factor_values <- sub(".*\\)(.*)$", "\\1", row_names)
coef_values <- coef(models$final$lasso)
coef_values <- as.numeric(as.matrix(coef_values))
coef_values[is.na(coef_values)] <- 0
# Adjusting model values
for (fact in num_facts){
temp_pdp_val <- round(univariate_pdp_data_complete[[fact]]$Final_model ,6)
temp_coef_level <- round(as.numeric(factor_values[which(factors==fact) ]),6)
temp_coef_val <- round(as.numeric(coef_values[which(factors==fact) ]),6)
temp_new_pdp_val <- rep(mean(boosting_df$train$freq), length(temp_pdp_val))
for (i in 1:length(temp_pdp_val)){
if( any(temp_pdp_val[i] == temp_coef_level)){
idx <- which(temp_pdp_val[i] == temp_coef_level)
temp_new_pdp_val[i] <- temp_coef_val[idx]
}
}
univariate_pdp_data_complete[[fact]]$Final_model_lasso <- temp_new_pdp_val
}
if (save == TRUE){
save(models, file = paste("Data/Models_",suffix,".RData", sep = ""))
save(boosting_df, file = paste("Data/Boost_data_",suffix,".RData", sep = ""))
save(pred, file = paste("Data/Predictions_",suffix,".RData", sep = ""))
save(univariate_pdp_data_complete, file = paste("Data/PDP_uni_",suffix,".RData", sep = ""))
}
for (fact in num_facts){
p <-  univariate_pdp_data_complete[[fact]] %>%
ggplot(aes(x=factor_val))+
geom_line(aes(y=Final_model, color="red"))+
geom_line(aes(y=Ref_gbm, color="grey"), lty=2) +
geom_line(aes(y=Final_model_lasso, color="blue"))+
geom_abline(intercept = mean(df$train$freq),slope=0, color="grey", alpha=0.5)+
#xlim(xlim[1],xlim[2])+
labs(x= fact,
y="PDP" )+
scale_colour_manual(name = '',
values =c('black'='black','red'='red','grey'='grey','blue'='blue'),
labels = c('Linear','Final GLM','GBM (PDP)','After trees')
)+
scale_y_continuous(sec.axis = sec_axis( trans= ~./mean(df$train$freq), name="Boosting factor")) +
theme_classic() +
theme(legend.position ="bottom")
ggsave(filename = paste(plot_folder,"/PDP_boost_",fact , ".png",sep=""), plot = p, dpi = 300,width = 10, height = 8)
}
univariate_pdp_data_complete
for (fact in num_facts){
p <-  univariate_pdp_data_complete[[fact]] %>%
ggplot(aes(x=factor_val))+
geom_line(aes(y=Final_model, color="red"))+
geom_line(aes(y=Ref_gbm_interpol , color="grey"), lty=2) +
geom_line(aes(y=Final_model_lasso, color="blue"))+
geom_abline(intercept = mean(df$train$freq),slope=0, color="grey", alpha=0.5)+
#xlim(xlim[1],xlim[2])+
labs(x= fact,
y="PDP" )+
scale_colour_manual(name = '',
values =c('black'='black','red'='red','grey'='grey','blue'='blue'),
labels = c('Linear','Final GLM','GBM (PDP)','After trees')
)+
scale_y_continuous(sec.axis = sec_axis( trans= ~./mean(df$train$freq), name="Boosting factor")) +
theme_classic() +
theme(legend.position ="bottom")
ggsave(filename = paste(plot_folder,"/PDP_boost_",fact , ".png",sep=""), plot = p, dpi = 300,width = 10, height = 8)
}
